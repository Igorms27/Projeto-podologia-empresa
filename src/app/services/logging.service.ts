import { Injectable } from '@angular/core';

import { environment } from '../../environments/environment';

/**
 * N√≠veis de log dispon√≠veis na aplica√ß√£o
 */
export enum LogLevel {
  DEBUG = 0, // Detalhes t√©cnicos, √∫til apenas para desenvolvimento
  INFO = 1, // Informa√ß√µes √∫teis sobre o estado da aplica√ß√£o
  WARN = 2, // Avisos que n√£o impedem funcionamento, mas podem indicar problemas
  ERROR = 3, // Erros que afetam o funcionamento da aplica√ß√£o
}

/**
 * Tipo para dados de log que podem ser de diferentes tipos
 */
type LogData = unknown;

/**
 * Servi√ßo de logging centralizado para toda a aplica√ß√£o.
 * Permite controlar logs por n√≠vel e configurar comportamento em produ√ß√£o.
 * Implementa n√≠veis de log configur√°veis baseados no ambiente atual.
 */
@Injectable({
  providedIn: 'root',
})
export class LoggingService {
  private production = environment.production;
  private minLevel: LogLevel;

  constructor() {
    // Definir o n√≠vel m√≠nimo de log baseado na configura√ß√£o do ambiente
    this.minLevel = this.getLogLevelFromString(environment.logLevel || 'DEBUG');

    // Log inicial para confirmar a configura√ß√£o (apenas em n√£o-produ√ß√£o)
    if (!this.production) {
      // Usar console diretamente aqui porque o servi√ßo ainda est√° sendo inicializado
      console.log(
        `üîß Sistema de log inicializado: ${LogLevel[this.minLevel]}, Produ√ß√£o: ${this.production}`
      );
    }
  }

  /**
   * Converte n√≠vel de log de string para enum
   */
  private getLogLevelFromString(level: string): LogLevel {
    switch (level.toUpperCase()) {
      case 'DEBUG':
        return LogLevel.DEBUG;
      case 'INFO':
        return LogLevel.INFO;
      case 'WARN':
        return LogLevel.WARN;
      case 'ERROR':
        return LogLevel.ERROR;
      default:
        return LogLevel.DEBUG;
    }
  }

  /**
   * Log de depura√ß√£o - detalhes t√©cnicos
   * Apenas vis√≠vel em desenvolvimento e se n√≠vel configurado for DEBUG
   */
  debug(message: string, ...data: LogData[]): void {
    if (this.minLevel <= LogLevel.DEBUG) {
      console.debug(`üîç DEBUG: ${message}`, ...data);
    }
  }

  /**
   * Log de informa√ß√£o - eventos normais da aplica√ß√£o
   * Apenas vis√≠vel se n√≠vel configurado for INFO ou menor
   */
  info(message: string, ...data: LogData[]): void {
    if (this.minLevel <= LogLevel.INFO) {
      console.log(`üìò INFO: ${message}`, ...data);
    }
  }

  /**
   * Log de aviso - problemas potenciais que n√£o impedem funcionamento
   * Apenas vis√≠vel se n√≠vel configurado for WARN ou menor
   */
  warn(message: string, ...data: LogData[]): void {
    if (this.minLevel <= LogLevel.WARN) {
      console.warn(`‚ö†Ô∏è WARN: ${message}`, ...data);
    }
  }

  /**
   * Log de erro - problemas cr√≠ticos que afetam funcionamento
   * Sempre vis√≠vel, independente do n√≠vel configurado
   * Em produ√ß√£o, poderia enviar para servi√ßo de monitoramento como Firebase Crashlytics ou Sentry
   */
  error(message: string, ...data: LogData[]): void {
    // Erros s√£o sempre logados, independente do n√≠vel
    console.error(`‚ùå ERROR: ${message}`, ...data);

    // Em implementa√ß√£o real para produ√ß√£o:
    // this.reportErrorToMonitoringService(message, data);
  }

  /**
   * M√©todo para enviar erros para servi√ßo de monitoramento (exemplo)
   * Implementa√ß√£o real dependeria do servi√ßo escolhido
   */
  private reportErrorToMonitoringService(_message: string, _data: LogData[]): void {
    // Implementa√ß√£o para enviar o erro para Firebase Crashlytics, Sentry, etc.
    // Exemplo:
    // if (this.production) {
    //   Sentry.captureException(new Error(_message), { extra: { _data } });
    // }
  }
}
